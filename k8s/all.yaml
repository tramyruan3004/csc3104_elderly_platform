# -------------------------
# Namespace
# -------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: play
---
# -------------------------
# Infra: NATS
# -------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nats
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: nats } }
  template:
    metadata: { labels: { app: nats } }
    spec:
      containers:
        - name: nats
          image: nats:2
          args: ["-js"]
          ports:
            - containerPort: 4222
          readinessProbe:
            tcpSocket: { port: 4222 }
            initialDelaySeconds: 2
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: nats
  namespace: play
spec:
  selector: { app: nats }
  ports:
    - name: client
      port: 4222
      targetPort: 4222
---
# -------------------------
# Infra: Redis
# -------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: redis } }
  template:
    metadata: { labels: { app: redis } }
    spec:
      containers:
        - name: redis
          image: redis:7-alpine
          ports:
            - containerPort: 6379
          readinessProbe:
            tcpSocket: { port: 6379 }
            initialDelaySeconds: 2
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: play
spec:
  selector: { app: redis }
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
---
# =========================================================
# Postgres per service (auth, trails, qr, points, leader)
# (Pattern repeated; adjust storage sizes if needed)
# =========================================================
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: auth-pg-pvc
  namespace: play
spec:
  accessModes: ["ReadWriteOnce"]
  resources: { requests: { storage: 2Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-db
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: auth-db } }
  template:
    metadata: { labels: { app: auth-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - { name: POSTGRES_USER, value: "auth" }
            - { name: POSTGRES_PASSWORD, value: "authpwd" }
            - { name: POSTGRES_DB, value: "authentication" }
          ports: [{ containerPort: 5432 }]
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 3
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: auth-pg-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: auth-db
  namespace: play
spec:
  selector: { app: auth-db }
  ports:
    - { name: pg, port: 5432, targetPort: 5432 }
---
# Trails DB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: trails-pg-pvc
  namespace: play
spec:
  accessModes: ["ReadWriteOnce"]
  resources: { requests: { storage: 2Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trails-db
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: trails-db } }
  template:
    metadata: { labels: { app: trails-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - { name: POSTGRES_USER, value: "trails" }
            - { name: POSTGRES_PASSWORD, value: "trailspwd" }
            - { name: POSTGRES_DB, value: "trails" }
          ports: [{ containerPort: 5432 }]
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 3
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: trails-pg-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: trails-db
  namespace: play
spec:
  selector: { app: trails-db }
  ports:
    - { name: pg, port: 5432, targetPort: 5432 }
---
# QR DB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: qr-pg-pvc
  namespace: play
spec:
  accessModes: ["ReadWriteOnce"]
  resources: { requests: { storage: 2Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qr-db
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: qr-db } }
  template:
    metadata: { labels: { app: qr-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - { name: POSTGRES_USER, value: "qr" }
            - { name: POSTGRES_PASSWORD, value: "qrpwd" }
            - { name: POSTGRES_DB, value: "qr" }
          ports: [{ containerPort: 5432 }]
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 3
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: qr-pg-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: qr-db
  namespace: play
spec:
  selector: { app: qr-db }
  ports:
    - { name: pg, port: 5432, targetPort: 5432 }
---
# Points DB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: points-pg-pvc
  namespace: play
spec:
  accessModes: ["ReadWriteOnce"]
  resources: { requests: { storage: 2Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: points-db
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: points-db } }
  template:
    metadata: { labels: { app: points-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - { name: POSTGRES_USER, value: "points" }
            - { name: POSTGRES_PASSWORD, value: "pointspwd" }
            - { name: POSTGRES_DB, value: "points" }
          ports: [{ containerPort: 5432 }]
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 3
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: points-pg-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: points-db
  namespace: play
spec:
  selector: { app: points-db }
  ports:
    - { name: pg, port: 5432, targetPort: 5432 }
---
# Leader DB
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: leader-pg-pvc
  namespace: play
spec:
  accessModes: ["ReadWriteOnce"]
  resources: { requests: { storage: 2Gi } }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: leader-db
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: leader-db } }
  template:
    metadata: { labels: { app: leader-db } }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          env:
            - { name: POSTGRES_USER, value: "leader" }
            - { name: POSTGRES_PASSWORD, value: "leaderpwd" }
            - { name: POSTGRES_DB, value: "leaderboard" }
          ports: [{ containerPort: 5432 }]
          volumeMounts:
            - { name: data, mountPath: /var/lib/postgresql/data }
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 3
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: leader-pg-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: leader-db
  namespace: play
spec:
  selector: { app: leader-db }
  ports:
    - { name: pg, port: 5432, targetPort: 5432 }
---
# =========================================================
# Applications
# =========================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: authentication-svc
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: authentication-svc } }
  template:
    metadata: { labels: { app: authentication-svc } }
    spec:
      containers:
        - name: app
          image: authentication-svc:latest
          imagePullPolicy: IfNotPresent
          env:
            - { name: DATABASE_URL, value: "postgresql+psycopg_async://auth:authpwd@auth-db.play.svc.cluster.local:5432/authentication" }
            - { name: ACCESS_TOKEN_EXP_MINUTES, value: "160" }
            - { name: REFRESH_TOKEN_EXP_MINUTES, value: "10080" }
            - { name: JWT_PRIVATE_KEY_PATH, value: "" }
            - { name: JWT_PUBLIC_KEY_PATH, value: "" }
            - { name: SERVICE_CLIENT_ID, value: "qr-checkin" }
            - { name: SERVICE_CLIENT_SECRET, value: "superlongrandomsecret" }
          ports: [{ containerPort: 8001 }]
          readinessProbe:
            httpGet: { path: /health, port: 8001 }
            initialDelaySeconds: 3
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: authentication-svc
  namespace: play
spec:
  selector: { app: authentication-svc }
  ports: [{ name: http, port: 8001, targetPort: 8001 }]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trails-activities-svc
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: trails-activities-svc } }
  template:
    metadata: { labels: { app: trails-activities-svc } }
    spec:
      containers:
        - name: app
          image: trails-activities-svc:latest
          imagePullPolicy: IfNotPresent
          env:
            - { name: DATABASE_URL, value: "postgresql+psycopg_async://trails:trailspwd@trails-db.play.svc.cluster.local:5432/trails" }
            - { name: AUTH_JWKS_URL, value: "http://authentication-svc.play.svc.cluster.local:8001/auth/jwks" }
            - { name: TOKEN_ISSUER, value: "authentication-svc" }
          ports: [{ containerPort: 8002 }]
          readinessProbe:
            httpGet: { path: /health, port: 8002 }
            initialDelaySeconds: 3
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: trails-activities-svc
  namespace: play
spec:
  selector: { app: trails-activities-svc }
  ports: [{ name: http, port: 8002, targetPort: 8002 }]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: points-vouchers-rules-svc
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: points-vouchers-rules-svc } }
  template:
    metadata: { labels: { app: points-vouchers-rules-svc } }
    spec:
      containers:
        - name: app
          image: points-vouchers-rules-svc:latest
          imagePullPolicy: IfNotPresent
          env:
            - { name: DATABASE_URL, value: "postgresql+psycopg_async://points:pointspwd@points-db.play.svc.cluster.local:5432/points" }
            - { name: AUTH_JWKS_URL, value: "http://authentication-svc.play.svc.cluster.local:8001/auth/jwks" }
            - { name: TOKEN_ISSUER, value: "authentication-svc" }
            - { name: NATS_URLS, value: "nats://nats.play.svc.cluster.local:4222" }
            - { name: NATS_SUBJECT_CHECKIN, value: "checkins.recorded" }
            - { name: ENABLE_NATS_CONSUMER, value: "true" }
          ports: [{ containerPort: 8003 }]
          readinessProbe:
            httpGet: { path: /health, port: 8003 }
            initialDelaySeconds: 3
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: points-vouchers-rules-svc
  namespace: play
spec:
  selector: { app: points-vouchers-rules-svc }
  ports: [{ name: http, port: 8003, targetPort: 8003 }]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: qr-checkin-svc
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: qr-checkin-svc } }
  template:
    metadata: { labels: { app: qr-checkin-svc } }
    spec:
      containers:
        - name: app
          image: qr-checkin-svc:latest
          imagePullPolicy: IfNotPresent
          env:
            - { name: DATABASE_URL, value: "postgresql+psycopg_async://qr:qrpwd@qr-db.play.svc.cluster.local:5432/qr" }
            - { name: AUTH_JWKS_URL, value: "http://authentication-svc.play.svc.cluster.local:8001/auth/jwks" }
            - { name: TOKEN_ISSUER, value: "authentication-svc" }
            - { name: TRAILS_BASE_URL, value: "http://trails-activities-svc.play.svc.cluster.local:8002" }
            - { name: POINTS_BASE_URL, value: "http://points-vouchers-rules-svc.play.svc.cluster.local:8003" }
            - { name: QR_SECRET, value: "change-this-for-prod" }
            - { name: QR_TTL_SECONDS, value: "120" }
            - { name: REDIS_URL, value: "redis://redis.play.svc.cluster.local:6379/0" }
            - { name: RL_ENABLED, value: "true" }
            - { name: RL_WINDOW_SECONDS, value: "60" }
            - { name: RL_MAX_REQS, value: "60" }
            - { name: NATS_URLS, value: "nats://nats.play.svc.cluster.local:4222" }
            - { name: NATS_SUBJECT_CHECKIN, value: "checkins.recorded" }
            - { name: USE_NATS_FOR_POINTS, value: "true" }
          ports: [{ containerPort: 8004 }]
          readinessProbe:
            httpGet: { path: /health, port: 8004 }
            initialDelaySeconds: 3
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: qr-checkin-svc
  namespace: play
spec:
  selector: { app: qr-checkin-svc }
  ports: [{ name: http, port: 8004, targetPort: 8004 }]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: leaderboard-attendance-svc
  namespace: play
spec:
  replicas: 1
  selector: { matchLabels: { app: leaderboard-attendance-svc } }
  template:
    metadata: { labels: { app: leaderboard-attendance-svc } }
    spec:
      containers:
        - name: app
          image: leaderboard-attendance-svc:latest
          imagePullPolicy: IfNotPresent
          env:
            - { name: DATABASE_URL, value: "postgresql+psycopg_async://leader:leaderpwd@leader-db.play.svc.cluster.local:5432/leaderboard" }
            - { name: AUTH_JWKS_URL, value: "http://authentication-svc.play.svc.cluster.local:8001/auth/jwks" }
            - { name: TOKEN_ISSUER, value: "authentication-svc" }
            - { name: NATS_URLS, value: "nats://nats.play.svc.cluster.local:4222" }
            - { name: NATS_SUBJECT_CHECKIN, value: "checkins.recorded" }
            - { name: ENABLE_NATS_CONSUMER, value: "true" }
            - { name: SCORING_MODE, value: "checkins" }
            - { name: RANKS_REBUILD_INTERVAL_SEC, value: "60" }
          ports: [{ containerPort: 8005 }]
          readinessProbe:
            httpGet: { path: /health, port: 8005 }
            initialDelaySeconds: 3
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: leaderboard-attendance-svc
  namespace: play
spec:
  selector: { app: leaderboard-attendance-svc }
  ports: [{ name: http, port: 8005, targetPort: 8005 }]
