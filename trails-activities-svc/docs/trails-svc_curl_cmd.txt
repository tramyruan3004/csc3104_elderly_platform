1. install dependencies
pip install -r requirements.txt

2. db setup
docker run -d --name pg-trails
  -e POSTGRES_USER=trails -e POSTGRES_PASSWORD=trailspwd -e POSTGRES_DB=trails 
  -p 54322:5432 postgres:16

3. real time acess to db to check:
docker exec -it pg-trails psql -U trails -d trails

4. Run the API server
python -m uvicorn app.main:app --reload --port 8002

5. API/ microservices testing curl
A. CREATE a trail under the organisation that the organiser belongs to (organiser login)
  # An example
  ORG_ID="71c0cc2f-6129-4f37-8741-6f5cb7d5d4e5" 
  # Organiser token from auth-svc
  LOGIN_JSON_ORG=$(curl -s http://localhost:8001/auth/login \
    -H "Content-Type: application/json" \
    -d '{"nric":"F1122334Z","passcode":"14062005"}')

  ACCESS_ORG=$(echo "$LOGIN_JSON_ORG" | jq -r '.tokens.access_token')

  curl -s http://localhost:8002/trails/orgs/$ORG_ID \
    -H "Authorization: Bearer $ACCESS_ORG" \
    -H "Content-Type: application/json" \
    -d '{
        "title": "Punggol District Exploration",
        "description": "A short engaging tour to explore the latest technological District",
        "starts_at": "2025-11-27T06:00:00Z",
        "ends_at": "2025-11-30T09:00:00Z",
        "location": "Punggol Coast",
        "capacity": 5
    }' | jq

  # An example 
  TRAIL_ID="a876d7f9-95f2-42dd-9871-80a7012b3392"

B. Attendee self-register (attend_user login)
  LOGIN_JSON_ATT=$(curl -s http://localhost:8001/auth/login \
    -H "Content-Type: application/json" \
    -d '{"nric":"T9876543A","passcode":"01011980"}')

  # Attendee access token from auth-svc
  ACCESS_ATT=$(echo "$LOGIN_JSON_ATT" | jq -r '.tokens.access_token')

  # SELF-REGISTER the trail 
  curl -s http://localhost:8002/registrations/trails/$TRAIL_ID/self \
    -H "Authorization: Bearer $ACCESS_ATT" \
    -H "Content-Type: application/json" \
    -d '{"note":"first timer"}' | jq

  # An example 
  REG_ID="b46b82cc-fe5a-49a2-b751-57f40ffe4978"
         "009f47f4-84b6-4588-b1c4-e624f478dea5"

C. Organiser approve the pending then confirm (organiser login)
  curl -s -X POST http://localhost:8002/registrations/$REG_ID/approve \
    -H "Authorization: Bearer $ACCESS_ORG" | jq

  curl -s -X POST http://localhost:8002/registrations/$REG_ID/confirm \
    -H "Authorization: Bearer $ACCESS_ORG" | jq

D. Attendee view the confirmed trails list (attend_user login)
  curl -s http://localhost:8002/users/me/confirmed-trails \
    -H "Authorization: Bearer $ACCESS_ATT" | jq

E. Organiser list confirmed attendees
curl -s http://localhost:8002/trails/$TRAIL_ID/attendees?status=confirmed \
  -H "Authorization: Bearer $ACCESS_ORG" | jq

F. Attendee SELF-CANCEL registration on their own - expecting HTTP/1.1 204 No Content
curl -s -X DELETE http://localhost:8002/registrations/$REG_ID \
  -H "Authorization: Bearer $ACCESS_ATT" -i

G. USE INVITATION LINK TO REGISTER
  # Organiser create an invite link for the trail
  curl -s -X POST http://localhost:8002/invites/trails/$TRAIL_ID \
    -H "Authorization: Bearer $ACCESS_ORG" | jq

  # Anyone with the link can preview the trail
  curl -s http://localhost:8002/invites/<token> | jq

  # Signed-in user accepts the invite â†’ auto-register
  curl -s -X POST http://localhost:8002/invites/$token/register \
    -H "Authorization: Bearer $ACCESS_ATT" | jq

H. Registration status for a user on a trail
  USER_ID_ATT=$(echo "$LOGIN_JSON_ATT" | jq -r '.user.id')

  # Test as AN ORGANISER
  curl -s -X GET "http://localhost:8002/trails/$TRAIL_ID/registrations/by-user/$USER_ID_ATT" \
    -H "Authorization: Bearer $ACCESS_ORG" | jq

  # Test as a ATT_USER
  curl -s -X GET "http://localhost:8002/trails/$TRAIL_ID/registrations/by-user/$USER_ID_ATT" \
    -H "Authorization: Bearer $ACCESS_ATT" | jq
  
  # Test as SERVICE ROLE
  curl -s "http://localhost:8002/trails/$TRAIL_ID/registrations/by-user/$USER_ID_ATT" \
    -H "Authorization: Bearer $SERVICE_TOKEN" | jq
